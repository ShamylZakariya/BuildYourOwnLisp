; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; function defs
(def {fun} (\ {f b} {
    def (head f) (\ (tail f) b)
}))

; Unpack List for Function
(fun {unpack f l} {
  eval (join (list f) l)
})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; perform thngs in sequence returning result of LASSERT
(fun {do & l} {
    if (== l nil)
        {nil}
        {last l}
})

; open new scope
(fun {let b} {
    ((\ {_} b) ())
})

; logical functions
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; list functions
; first, second or third item in a list
(fun {first l} { eval (head l) })
(fun {second l} { eval (head (tail l)) })
(fun {third l} { eval (head (tail (tail l))) })

; list length
(fun {len l} {
    if (== l nil)
        {0}
        {+ 1 (len (tail l))}
})

; nth item in list
(fun {nth n l}{
    if (== n 0)
        {first l}
        {nth (- n 1) (tail l)}
})

; last item in list
(fun {last l} {nth (- (len l) 1) l})

; take N items
(fun {take n l} {
    if (== n 0)
        {nil}
        {join (head l) (take (- n 1) (tail l))}
})

; drop N items
(fun {drop n l} {
    if (== n 0)
        {l}
        {drop (- n 1) (tail l)}
})

; split at N
(fun {split n l} {list (take n l) (drop n l) })

; find element in list
(fun {elem x l} {
    if (== l nil)
        {false}
        {if (== x (first l)) { true } { elem x (tail l) }}
})

; apply function to list
(fun {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (first l))) (map f (tail l))}
})

; filter list
(fun {filter f l} {
    if (== l nil)
        {nil}
        {join (if (f (first l)) {head l} {nil}) (filter f (tail l))}
})

; fold left
(fun {foldl f z l} {
    if (== l nil)
        {z}
        {foldl f (f z (first l)) (tail l)}
})

(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

(fun {select & cs} {
    if (== cs nil)
        {error "No Selection Found"}
        {if (first (first cs))
            {second (first cs)}
            {unpack select (tail cs)}
        }
})

(def {otherwise} true)

(fun {month-day-suffix} {
    select
        {(== i 0)  "st"}
        {(== i 1)  "nd"}
        {(== i 3)  "rd"}
        {otherwise "th"}
})

(fun {case x & cs} {
    if (== cs nil)
        {error "No case found" }
        {if (== x (first (first cs)))
            {second (first cs)}
            {unpack case (join (list x) (tail cs))}
        }
})

(fun {day-name x} {
    case x
        {0 "Monday"}
        {1 "Tuesday"}
        {2 "Wednesday"}
        {3 "Thursday"}
        {4 "Friday"}
        {5 "Saturday"}
        {6 "Sunday"}
})

(fun {fib n} {
    select
        { (== n 0) 0 }
        { (== n 1) 1 }
        { otherwise (+ (fib (- n 1)) (fib (- n 2))) }
})